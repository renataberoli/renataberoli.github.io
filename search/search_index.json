{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Me Who is Renata Beroli Hi, my name is Renata Oliveira. I'm a Brazilian woman living in Copenhagen-Denmark. Experienced IT professional with a history of work in the biotech industry. Skilled in the Adobe ecosystem, agile methodologies, QA, and UI/UX design, I worked with most of the software development lifecycle and feel comfortable designing to achieve efficiency and good experiences. Hobbies and loves Embroidery Photography Papercraft Painting","title":"About Me"},{"location":"#about-me","text":"","title":"About Me"},{"location":"#who-is-renata-beroli","text":"Hi, my name is Renata Oliveira. I'm a Brazilian woman living in Copenhagen-Denmark. Experienced IT professional with a history of work in the biotech industry. Skilled in the Adobe ecosystem, agile methodologies, QA, and UI/UX design, I worked with most of the software development lifecycle and feel comfortable designing to achieve efficiency and good experiences.","title":"Who is Renata Beroli"},{"location":"#hobbies-and-loves","text":"Embroidery Photography Papercraft Painting","title":"Hobbies and loves"},{"location":"projects/dockgrid/","text":"Dockgrid Dockgrid is an easy-to-use data analysis orchestration tool for distributed computing. Context The product's primary goal is to create a simple and effective environment for small companies, universities, and bioinformaticians to run their pipelines from their machines without a lot of configuration or cloud. Objective In this project, my challenge was to propose improvements to the beta version of the service. The Process I use the fundamentals of Design Thinking to build all new processes or ideas. Empathise Research I usually began the research with desk research to understand the User. While doing this desk research, I make a CSD (Certainties, Suppositions, and Doubts) Matrix. It's a technique that you can use to define the scope of some new challenge, and I usually use it before interviews to clearly understand the minimum I need to know about the User. The matrix has three columns: 1) what is already known, 2) hypotheses raised, and 3) what is still unknown and needs to be investigated. Then, being the CSD matrix ready, I start to listen to the users. Define In this step, I take the information I got in the research and define some crucial aspects to move on. Some of these aspects are the Target audience, User's pains, User's goals, and Competitors. Competitors Analysis I identified the companies that have the closest services to analyze your features, how they talk with your target audience and what I could do better. List of Competitors - https://tower.nf/ - https://www.prefect.io/ - https://airflow.apache.org/ - https://github.com/features/actions Ideate Sketch The sketch is a quick way to put ideas on the paper and test with the stakeholders. Prototype Solution The solution's main goal was to reach simplicity without losing the many features that make the system a robust tool. Design System The beta version was built only using the Bootstrap default components and colors. In this new version, the stakeholders wish to give a personality for the brand, so I worked on an initial design system for the project. Design decisions In the initial research, I noticed that the interfaces of this kind of application are crowded. Too many features and data may cause distraction and confusion. So I worked on a clean design with components that could be reused in different parts of the flow. I chose to change the orientation of the cards to make better use of the screen space and decrease the vertical scrolling that existed on small screens. This pattern is also good in mobile interfaces because we could use labels on the side. Test The \"final test\" is usability Testing performed by me with a sample of the system's users in the Figma prototype. The idea was approved with some minor changes. What did I Learn? I improved my experience using Figma to design the UI templates; To use more the \"paper-prototype\" to validate initial ideas.","title":"Dockgrid"},{"location":"projects/dockgrid/#dockgrid","text":"Dockgrid is an easy-to-use data analysis orchestration tool for distributed computing.","title":"Dockgrid"},{"location":"projects/dockgrid/#context","text":"The product's primary goal is to create a simple and effective environment for small companies, universities, and bioinformaticians to run their pipelines from their machines without a lot of configuration or cloud.","title":"Context"},{"location":"projects/dockgrid/#objective","text":"In this project, my challenge was to propose improvements to the beta version of the service.","title":"Objective"},{"location":"projects/dockgrid/#the-process","text":"I use the fundamentals of Design Thinking to build all new processes or ideas.","title":"The Process"},{"location":"projects/dockgrid/#empathise","text":"","title":"Empathise"},{"location":"projects/dockgrid/#research","text":"I usually began the research with desk research to understand the User. While doing this desk research, I make a CSD (Certainties, Suppositions, and Doubts) Matrix. It's a technique that you can use to define the scope of some new challenge, and I usually use it before interviews to clearly understand the minimum I need to know about the User. The matrix has three columns: 1) what is already known, 2) hypotheses raised, and 3) what is still unknown and needs to be investigated. Then, being the CSD matrix ready, I start to listen to the users.","title":"Research"},{"location":"projects/dockgrid/#define","text":"In this step, I take the information I got in the research and define some crucial aspects to move on. Some of these aspects are the Target audience, User's pains, User's goals, and Competitors.","title":"Define"},{"location":"projects/dockgrid/#competitors-analysis","text":"I identified the companies that have the closest services to analyze your features, how they talk with your target audience and what I could do better. List of Competitors - https://tower.nf/ - https://www.prefect.io/ - https://airflow.apache.org/ - https://github.com/features/actions","title":"Competitors Analysis"},{"location":"projects/dockgrid/#ideate","text":"","title":"Ideate"},{"location":"projects/dockgrid/#sketch","text":"The sketch is a quick way to put ideas on the paper and test with the stakeholders.","title":"Sketch"},{"location":"projects/dockgrid/#prototype","text":"","title":"Prototype"},{"location":"projects/dockgrid/#solution","text":"The solution's main goal was to reach simplicity without losing the many features that make the system a robust tool.","title":"Solution"},{"location":"projects/dockgrid/#design-system","text":"The beta version was built only using the Bootstrap default components and colors. In this new version, the stakeholders wish to give a personality for the brand, so I worked on an initial design system for the project.","title":"Design System"},{"location":"projects/dockgrid/#design-decisions","text":"In the initial research, I noticed that the interfaces of this kind of application are crowded. Too many features and data may cause distraction and confusion. So I worked on a clean design with components that could be reused in different parts of the flow. I chose to change the orientation of the cards to make better use of the screen space and decrease the vertical scrolling that existed on small screens. This pattern is also good in mobile interfaces because we could use labels on the side.","title":"Design decisions"},{"location":"projects/dockgrid/#test","text":"The \"final test\" is usability Testing performed by me with a sample of the system's users in the Figma prototype. The idea was approved with some minor changes.","title":"Test"},{"location":"projects/dockgrid/#what-did-i-learn","text":"I improved my experience using Figma to design the UI templates; To use more the \"paper-prototype\" to validate initial ideas.","title":"What did I Learn?"},{"location":"projects/neobiome/","text":"Context The Neobiome platform represents a complete solution for quality monitoring and a strategic decision-making tool based on microbiome information. With our platform, we provide support in the areas of contamination and outbreak tracking and control, risk management, process improvement, food safety, and good practices for microbiological control. The Solution I worked in the dashboard of this system and the redesign of some components and graphs to improve the user's experience {: .box-note} To see more about the Neobiome BIM: Neobiome BIM - Microorganisms Information Bank","title":"Neobiome BIM"},{"location":"projects/neobiome/#context","text":"The Neobiome platform represents a complete solution for quality monitoring and a strategic decision-making tool based on microbiome information. With our platform, we provide support in the areas of contamination and outbreak tracking and control, risk management, process improvement, food safety, and good practices for microbiological control.","title":"Context"},{"location":"projects/neobiome/#the-solution","text":"I worked in the dashboard of this system and the redesign of some components and graphs to improve the user's experience {: .box-note} To see more about the Neobiome BIM: Neobiome BIM - Microorganisms Information Bank","title":"The Solution"},{"location":"projects/reports/","text":"Context - Gut microbiome report As usual in the beta version, the first reports of these tests were just a massive amount of text. Thus, quality content was difficult to assimilate because the doctor had a short time in the consultation. So our challenge was to translate the complex biological data (text) into visual data easier to understand. Here is a sample of the solution: One-page review - Gut microbiome Context - COVID-19 report With the coronavirus pandemic, we start to do the covid-19 test. So, I designed this template thinking about reducing the time scan of the page's content. I worked to make the result and the Qrcode the attention points of the report because it's the essential content for this kind of report. COVID-19 report","title":"Microbiome Reports"},{"location":"projects/reports/#context-gut-microbiome-report","text":"As usual in the beta version, the first reports of these tests were just a massive amount of text. Thus, quality content was difficult to assimilate because the doctor had a short time in the consultation. So our challenge was to translate the complex biological data (text) into visual data easier to understand. Here is a sample of the solution:","title":"Context - Gut microbiome report"},{"location":"projects/reports/#one-page-review-gut-microbiome","text":"","title":"One-page review - Gut microbiome"},{"location":"projects/reports/#context-covid-19-report","text":"With the coronavirus pandemic, we start to do the covid-19 test. So, I designed this template thinking about reducing the time scan of the page's content. I worked to make the result and the Qrcode the attention points of the report because it's the essential content for this kind of report.","title":"Context - COVID-19 report"},{"location":"projects/reports/#covid-19-report","text":"","title":"COVID-19 report"},{"location":"projects/test_case/","text":"Testing GitHub Search API with python unittest Project Name: Testing GitHub Search API with python unittest Module Name: Searching for repositories Reference Document: Github Docs Test Scenarios: Positive Testing + Optional Parameters Created By: Renata Beroli Date of Creation: 24/11/2021 Test Action Category Test Action Description Validate status code: 200 OK for GET requests Validate state: N/A Performance sanity: N/A Test Cases Those Test Cases bellow were executed and automatized in my GitHub --> Unittest - GitHub API test_repository_search_by_name Description Test Data Expected Result This test aims to confirm that the GitHub Search API returns just the result that matches the repository's name searched. Use: Keyword \"Python\". Qualifier \"in:name\". The GitHub API returns a list of repositories with the specific name that was searched. Comments: N/A test_repository_search_by_description Description Test Data Expected Result This test aims to confirm that Github Search API returns the repositories that have in the description the keyword searched. Use: Keyword \"Python\". Qualifier \"in:description\". The GitHub API returns one or more repositories that have the word \u201cPython\u201d in your description. Comments: N/A test_repository_search_by_readme Description Test Data Expected Result This test aims to confirm that GitHub Search API returns the repositories that have in the readme the keyword searched. Use: Keyword \"Cadmio\". Qualifier \"in:readme\". The GitHub API returns one or more repositories with the word \u201cCadmio\u201d in your readme. Comments: N/A test_repository_search_by_owner_name Description Test Data Expected Result This test aims to confirm that GitHub Search API returns just the repository of the specific patch. Use: owner/name \"renataberoli/renataberoli.github.io\". Qualifier \"repo:owner/name\". The GitHub API returns only the specific repository searched. Comments: N/A test_repository_search_by_user Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only the repositories of a specific user. Use: User \"renataberoli\". Qualifier \"user\". The GitHub API returns only the repositories of \u201crenataberoli\u201d. Comments: N/A test_repository_search_by_org Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only the repositories of a specific organization. Use: Organization: \u201cgithub\u201d. Qualifier: \u201corg\u201d. The GitHub API returns only the repositories of the organization \u201cgithub\u201d. Comments: N/A test_repository_search_by_size Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only repositories of a certain size. Use: repository\u2019s size: less or equal than 100 kilobytes. Qualifier: \u201csize\u201d. The GitHub API returns only repositories smaller or equal to 100 kilobytes. Comments: N/A test_repository_search_by_number_of_followers Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only repositories of a certain number of followers. Use: Keyword \u201crenataberoli\u201d; Number of followers = 1. Qualifier: \u201cin:description\u201d; \u201cfollowers\u201d. The Github API returns only the repository with \u201crenataberoli\u201d in the description and that the number of followers is 1. Comments: This test was hard to do due to the confusion about the subject of the repository's \"follower\". Problem evidence test_repository_search_by_number_of_forks Description Test Data Expected Result The test aims to confirm that GitHub Search API returns repositories of a certain number of forks. Use: Number of forks greater or equal to 10000; sort by \u201cforks\u201d; order ascendant. Qualifiers: \u201cfork\u201d; \u201csort\u201d; \u201corder\u201d. The GitHub API returns a list of repositories with number of forks greater or equal to 10000 ordered ascendant. Comments: I found an ordination issue repository's response when the number of cores is lower (like in the >=1000 scenario). To see more about this problem, consider visiting the test code in my Github repository . test_repository_search_by_number_of_stars Description Test Data Expected Result The test aims to confirm that GitHub Search API returns the repositories of a specific number of stars ordered ascendant. Use: Number of stars greater than 5000; sorted by: stars; ordered by: ascendant. Qualifiers: \u201cstars\u201d; \u201csort\u201d; \u201corder\u201d. The GitHub API returned a list of repositories with more than 5000 and ordered ascendant. Comments: N/A test_repository_search_by_creation_date Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories from a specifc creation date. Use: Date: 2021-01-01. Qualifier: \u201ccreated\u201d The GItHub API returned a list of repositories with the creation date from \u201c2021-01-01\u201d. Comments: N/A test_repository_search_by_push_date Description Test Data Expected Result The test aims to confirm that GItHub API returns the repositories from a specifc pushed date. Use: Date: 2020-01-01. Qualifier: \u201cpushed\u201d The GItHub API returned a list of repositories with the creation date from \u201c2020-01-01\u201d. Comments: N/A test_repository_search_by_language Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that have a specific language. Use: Language \u201cpython\u201d. Qualifier: \u201clanguage\u201d. The GitHub API returned a list of repositories with \u201cpython\u201d as a language. Comments: N/A test_repository_search_by_topic Description Test Data Expected Result The test aims to confirm that GitHub API returns the respositories os that have a specific topic. Use: Keyword \u201cpython. Qualifier: \u201ctopic\u201d. The GitHub API returned a list of repositories with \u201cpython\u201d as a topic in the topic list. Comments: N/A test_repository_search_by_number_of_topics Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories of a certain amount of topics. Use: Number of topics: 1. Qualifier: \u201ctopics\u201d. The GitHub API returned only repositories with one topic applied to repository. Comments: N/A test_repository_search_by_license Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that contain the keyword and a specific license applied. Use: Keyword \u201cpython\u201d; licence \u201ceupl-1.1\u201d. Qualifier: \u201clicense\u201d. The GitHub API returned only repositories that contain the keyword \u201cpython\u201d and the license \u201ceupl-1.1\u201d. Comments: N/A test_repository_search_by_visibility Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories with the two types of visibility (public and private). Use: Private test = Keyword \u201csignature\u201d in readme; user \u201crenataberoli\u201d. Qualifiers: \u201cin:readme\u201d; \u201cuser\u201d; \u201cis:private\u201d. Public test = Keyword \u201crenataberoli\u201d in description; user \u201crenataberoli\u201d. Qualifiers: \u201cin:description\u201d; \u201cuser\u201d; \u201cis:public\u201d. Private test = The GitHub API returned an empty object due to the private state of the repository and the test without authentication. Public test = The GitHub API returned only the repository searched. Comments: N/A test_repository_search_by_if_is_mirror Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that are mirrors. Use: Qualifier: \u201cmirror:true\u201d. The GitHub API returned only repositories that are mirrors. Comments: N/A test_repository_search_by_if_is_archived Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that were archived. Use: Qualifier: \u201carchived:true\u201d. The GitHub API returned a list of only archived repositories. Comments: N/A test_repository_search_by_issue_label_good_first_issues Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories filter by a specific label of these issues. Use: Keyword \u201crenataberoli\u201d in description; Amount of issues with the label: 1. Qualifiers: \u201cin:description\u201d \u201cgood-first-issues\u201d. The GitHub API returned a specific repository with \u201crenataberoli\u201d in the description and 1 issue with the label \u201cgood first issues\u201d. Comments: N/A test_repository_search_by_issue_label_wanted_issues Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories filter by a specific label of these issues. Use: Keyword \u201crenataberoli\u201d in description; Amount of issues with the label: 1. Qualifiers: \u201cin:description\u201d \u201chelp-wanted-issues\u201d. The GitHub API returned a specific repository with \u201crenataberoli\u201d in the description and 1 issue with the label \u201chelp wanted issues\u201d. Comments: N/A test_repository_search_by_ability_to_sponsor Description Test Data Expected Result The test aims to confirm that GitHub API returns only repositories that have the ability to sponsor. Use: Qualifier: \u201cis:sponsorable\u201d. The GitHub API returned a list of repositories that has the ability to sponsor. Comments: The API didn't return an object that helped to confirm this test.","title":"Test Cases"},{"location":"projects/test_case/#testing-github-search-api-with-python-unittest","text":"Project Name: Testing GitHub Search API with python unittest Module Name: Searching for repositories Reference Document: Github Docs Test Scenarios: Positive Testing + Optional Parameters Created By: Renata Beroli Date of Creation: 24/11/2021 Test Action Category Test Action Description Validate status code: 200 OK for GET requests Validate state: N/A Performance sanity: N/A","title":"Testing GitHub Search API with python unittest"},{"location":"projects/test_case/#test-cases","text":"Those Test Cases bellow were executed and automatized in my GitHub --> Unittest - GitHub API","title":"Test Cases"},{"location":"projects/test_case/#test_repository_search_by_name","text":"Description Test Data Expected Result This test aims to confirm that the GitHub Search API returns just the result that matches the repository's name searched. Use: Keyword \"Python\". Qualifier \"in:name\". The GitHub API returns a list of repositories with the specific name that was searched. Comments: N/A","title":"test_repository_search_by_name"},{"location":"projects/test_case/#test_repository_search_by_description","text":"Description Test Data Expected Result This test aims to confirm that Github Search API returns the repositories that have in the description the keyword searched. Use: Keyword \"Python\". Qualifier \"in:description\". The GitHub API returns one or more repositories that have the word \u201cPython\u201d in your description. Comments: N/A","title":"test_repository_search_by_description"},{"location":"projects/test_case/#test_repository_search_by_readme","text":"Description Test Data Expected Result This test aims to confirm that GitHub Search API returns the repositories that have in the readme the keyword searched. Use: Keyword \"Cadmio\". Qualifier \"in:readme\". The GitHub API returns one or more repositories with the word \u201cCadmio\u201d in your readme. Comments: N/A","title":"test_repository_search_by_readme"},{"location":"projects/test_case/#test_repository_search_by_owner_name","text":"Description Test Data Expected Result This test aims to confirm that GitHub Search API returns just the repository of the specific patch. Use: owner/name \"renataberoli/renataberoli.github.io\". Qualifier \"repo:owner/name\". The GitHub API returns only the specific repository searched. Comments: N/A","title":"test_repository_search_by_owner_name"},{"location":"projects/test_case/#test_repository_search_by_user","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only the repositories of a specific user. Use: User \"renataberoli\". Qualifier \"user\". The GitHub API returns only the repositories of \u201crenataberoli\u201d. Comments: N/A","title":"test_repository_search_by_user"},{"location":"projects/test_case/#test_repository_search_by_org","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only the repositories of a specific organization. Use: Organization: \u201cgithub\u201d. Qualifier: \u201corg\u201d. The GitHub API returns only the repositories of the organization \u201cgithub\u201d. Comments: N/A","title":"test_repository_search_by_org"},{"location":"projects/test_case/#test_repository_search_by_size","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only repositories of a certain size. Use: repository\u2019s size: less or equal than 100 kilobytes. Qualifier: \u201csize\u201d. The GitHub API returns only repositories smaller or equal to 100 kilobytes. Comments: N/A","title":"test_repository_search_by_size"},{"location":"projects/test_case/#test_repository_search_by_number_of_followers","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only repositories of a certain number of followers. Use: Keyword \u201crenataberoli\u201d; Number of followers = 1. Qualifier: \u201cin:description\u201d; \u201cfollowers\u201d. The Github API returns only the repository with \u201crenataberoli\u201d in the description and that the number of followers is 1. Comments: This test was hard to do due to the confusion about the subject of the repository's \"follower\". Problem evidence","title":"test_repository_search_by_number_of_followers"},{"location":"projects/test_case/#test_repository_search_by_number_of_forks","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns repositories of a certain number of forks. Use: Number of forks greater or equal to 10000; sort by \u201cforks\u201d; order ascendant. Qualifiers: \u201cfork\u201d; \u201csort\u201d; \u201corder\u201d. The GitHub API returns a list of repositories with number of forks greater or equal to 10000 ordered ascendant. Comments: I found an ordination issue repository's response when the number of cores is lower (like in the >=1000 scenario). To see more about this problem, consider visiting the test code in my Github repository .","title":"test_repository_search_by_number_of_forks"},{"location":"projects/test_case/#test_repository_search_by_number_of_stars","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns the repositories of a specific number of stars ordered ascendant. Use: Number of stars greater than 5000; sorted by: stars; ordered by: ascendant. Qualifiers: \u201cstars\u201d; \u201csort\u201d; \u201corder\u201d. The GitHub API returned a list of repositories with more than 5000 and ordered ascendant. Comments: N/A","title":"test_repository_search_by_number_of_stars"},{"location":"projects/test_case/#test_repository_search_by_creation_date","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories from a specifc creation date. Use: Date: 2021-01-01. Qualifier: \u201ccreated\u201d The GItHub API returned a list of repositories with the creation date from \u201c2021-01-01\u201d. Comments: N/A","title":"test_repository_search_by_creation_date"},{"location":"projects/test_case/#test_repository_search_by_push_date","text":"Description Test Data Expected Result The test aims to confirm that GItHub API returns the repositories from a specifc pushed date. Use: Date: 2020-01-01. Qualifier: \u201cpushed\u201d The GItHub API returned a list of repositories with the creation date from \u201c2020-01-01\u201d. Comments: N/A","title":"test_repository_search_by_push_date"},{"location":"projects/test_case/#test_repository_search_by_language","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that have a specific language. Use: Language \u201cpython\u201d. Qualifier: \u201clanguage\u201d. The GitHub API returned a list of repositories with \u201cpython\u201d as a language. Comments: N/A","title":"test_repository_search_by_language"},{"location":"projects/test_case/#test_repository_search_by_topic","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the respositories os that have a specific topic. Use: Keyword \u201cpython. Qualifier: \u201ctopic\u201d. The GitHub API returned a list of repositories with \u201cpython\u201d as a topic in the topic list. Comments: N/A","title":"test_repository_search_by_topic"},{"location":"projects/test_case/#test_repository_search_by_number_of_topics","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories of a certain amount of topics. Use: Number of topics: 1. Qualifier: \u201ctopics\u201d. The GitHub API returned only repositories with one topic applied to repository. Comments: N/A","title":"test_repository_search_by_number_of_topics"},{"location":"projects/test_case/#test_repository_search_by_license","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that contain the keyword and a specific license applied. Use: Keyword \u201cpython\u201d; licence \u201ceupl-1.1\u201d. Qualifier: \u201clicense\u201d. The GitHub API returned only repositories that contain the keyword \u201cpython\u201d and the license \u201ceupl-1.1\u201d. Comments: N/A","title":"test_repository_search_by_license"},{"location":"projects/test_case/#test_repository_search_by_visibility","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories with the two types of visibility (public and private). Use: Private test = Keyword \u201csignature\u201d in readme; user \u201crenataberoli\u201d. Qualifiers: \u201cin:readme\u201d; \u201cuser\u201d; \u201cis:private\u201d. Public test = Keyword \u201crenataberoli\u201d in description; user \u201crenataberoli\u201d. Qualifiers: \u201cin:description\u201d; \u201cuser\u201d; \u201cis:public\u201d. Private test = The GitHub API returned an empty object due to the private state of the repository and the test without authentication. Public test = The GitHub API returned only the repository searched. Comments: N/A","title":"test_repository_search_by_visibility"},{"location":"projects/test_case/#test_repository_search_by_if_is_mirror","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that are mirrors. Use: Qualifier: \u201cmirror:true\u201d. The GitHub API returned only repositories that are mirrors. Comments: N/A","title":"test_repository_search_by_if_is_mirror"},{"location":"projects/test_case/#test_repository_search_by_if_is_archived","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that were archived. Use: Qualifier: \u201carchived:true\u201d. The GitHub API returned a list of only archived repositories. Comments: N/A","title":"test_repository_search_by_if_is_archived"},{"location":"projects/test_case/#test_repository_search_by_issue_label_good_first_issues","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories filter by a specific label of these issues. Use: Keyword \u201crenataberoli\u201d in description; Amount of issues with the label: 1. Qualifiers: \u201cin:description\u201d \u201cgood-first-issues\u201d. The GitHub API returned a specific repository with \u201crenataberoli\u201d in the description and 1 issue with the label \u201cgood first issues\u201d. Comments: N/A","title":"test_repository_search_by_issue_label_good_first_issues"},{"location":"projects/test_case/#test_repository_search_by_issue_label_wanted_issues","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories filter by a specific label of these issues. Use: Keyword \u201crenataberoli\u201d in description; Amount of issues with the label: 1. Qualifiers: \u201cin:description\u201d \u201chelp-wanted-issues\u201d. The GitHub API returned a specific repository with \u201crenataberoli\u201d in the description and 1 issue with the label \u201chelp wanted issues\u201d. Comments: N/A","title":"test_repository_search_by_issue_label_wanted_issues"},{"location":"projects/test_case/#test_repository_search_by_ability_to_sponsor","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns only repositories that have the ability to sponsor. Use: Qualifier: \u201cis:sponsorable\u201d. The GitHub API returned a list of repositories that has the ability to sponsor. Comments: The API didn't return an object that helped to confirm this test.","title":"test_repository_search_by_ability_to_sponsor"}]}