{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Me Who is Renata Beroli Hi, my name is Renata Oliveira. Originally from Brazil, I'm currently living in Copenhagen-Denmark. I am an experienced IT professional with a history of work in the biotech industry. My skills include Adobe ecosystem, agile methodologies, QA, and UI/UX design. I have worked with most of the software development lifecycle and am confident in my design and efficiency. Hobbies and loves Embroidery Photography Papercraft Painting","title":"About Me"},{"location":"#about-me","text":"","title":"About Me"},{"location":"#who-is-renata-beroli","text":"Hi, my name is Renata Oliveira. Originally from Brazil, I'm currently living in Copenhagen-Denmark. I am an experienced IT professional with a history of work in the biotech industry. My skills include Adobe ecosystem, agile methodologies, QA, and UI/UX design. I have worked with most of the software development lifecycle and am confident in my design and efficiency.","title":"Who is Renata Beroli"},{"location":"#hobbies-and-loves","text":"Embroidery Photography Papercraft Painting","title":"Hobbies and loves"},{"location":"projects/bug_catcher/","text":"Getting started Try a live Demo user renataberoli password 123and4 About the project This project is a Pet-project that I created to learn more about the Django framework. Bug catcher is an issue tracker that that aims to simplify and be of better use for small teams, despite agile methodologies usage. Sketch The sketch is the most basic structure I designed within the project. Therefore, it's an excellent opportunity to put the ideas on paper and start initial tests. Also, working as a developer, I use the sketch to understand structures of information and draw the models I need in order to create my system. The solution After sketching the interfaces and the system architecture, I translate my sketch into a coding interface with Bootstrap patterns. Responsive layout My main objective for the project is creating a desktop system. I was careful to keep all the interfaces responsible, as most of the web accesses are from mobile devices. Tech stack Installation Step 1 Clone this repository $ git clone https://github.com/renataberoli/bug_catcher.git Step 2 Create a virtual environment $ python3 -m venv myvenv ** Linux and macOS Installing on Windows If you are using a virtualenv on Windows, run the fallen command: $ python -m venv myvenv Step 3 Install the requirements $ pip install -f requirements.txt Installing pip If you don't have the 'pip' package installed, run the fallen command: $ python -m pip install --upgrade pip In this way you'll get the most updated version of the 'pip' package. **This command is compatible with Linux, macOS and Windows Step 4 Create a superuser $ python manage.py createsuperuser Test cases Test Cases Plan Scenario 1 - Login test_login_failed Description Test Data Expected Result The test aims to check if the user can access the system if the login fails. Use: username - \u201cberoli\u201d; password - \u201c1234\u201d The system will return an error asking the user to enter a correct username. test_login_success Description Test Data Expected Result The test aims to check if the user will be redirected to the main page if the login is successful. Use: username - \u201crenataberoli\u201d; password - \u201c123and4\u201d The user will be redirected to the \u201clist of issues\u201d page. Scenario 2 - List filters test_search_filter Description Test Data Expected Result This test aims to check if the search field works as expected. Use: Use: \u201cerror\u201d as the search argument. The system will return only issues with \u201cerror\u201d in some parts of the title. test_priority_filter Description Test Data Expected Result The test aims to check if the priority field works as expected. Use: Use: \u201curgent\u201d as the field\u2019s option. The system will only return issues with \u201cUrgent\u201d priority. test_status_filter Description Test Data Expected Result The test aims to check if the status field works as expected. Use: Use: \u201cclosed\u201d as the field\u2019s option. The system will only return issues with the status \u201cclosed\u201d. test_all_filters_together Description Test Data Expected Result The test aims to check if all the list filters work together as expected. Use: search argument - \u201cerror\u201d; priority - \u201curgent\u201d; status - \u201copen\u201d; label - \u201cfrontend\u201d; assigned - \u201crenataberoli\u201d. The system will only show the issue that matches all the filter's arguments. Scenario 3 - Create issue test_issue_creation Description Test Data Expected Result The test aims to check if the issue's creation is working as expected. Use: title - \u201cTest issue if issue is created\u201d; project - \u201cAcme\u201d; status - \u201copen\u201d; assignee - \u201crenataberoli\u201d. The system will create a new issue and redirect the user to the detail view. Roadmap Create the basic structure of the system (CRUD - create, retrieve, update and delete). Add a pagination for this list of issues. Create a series of list filters to help the user find what he wants. Create a login and authentication flow. Improve the UI to meet the mockups design before. Improve the software's documentation. Write some basic tests to make sure that the system is working as expected.","title":"Bug Catcher"},{"location":"projects/bug_catcher/#getting-started","text":"","title":"Getting started"},{"location":"projects/bug_catcher/#try-a-live-demo","text":"","title":"Try a live Demo"},{"location":"projects/bug_catcher/#user","text":"renataberoli","title":"user"},{"location":"projects/bug_catcher/#password","text":"123and4","title":"password"},{"location":"projects/bug_catcher/#about-the-project","text":"This project is a Pet-project that I created to learn more about the Django framework. Bug catcher is an issue tracker that that aims to simplify and be of better use for small teams, despite agile methodologies usage.","title":"About the project"},{"location":"projects/bug_catcher/#sketch","text":"The sketch is the most basic structure I designed within the project. Therefore, it's an excellent opportunity to put the ideas on paper and start initial tests. Also, working as a developer, I use the sketch to understand structures of information and draw the models I need in order to create my system.","title":"Sketch"},{"location":"projects/bug_catcher/#the-solution","text":"After sketching the interfaces and the system architecture, I translate my sketch into a coding interface with Bootstrap patterns.","title":"The solution"},{"location":"projects/bug_catcher/#responsive-layout","text":"My main objective for the project is creating a desktop system. I was careful to keep all the interfaces responsible, as most of the web accesses are from mobile devices.","title":"Responsive layout"},{"location":"projects/bug_catcher/#tech-stack","text":"","title":"Tech stack"},{"location":"projects/bug_catcher/#installation","text":"","title":"Installation"},{"location":"projects/bug_catcher/#step-1","text":"Clone this repository $ git clone https://github.com/renataberoli/bug_catcher.git","title":"Step 1"},{"location":"projects/bug_catcher/#step-2","text":"Create a virtual environment $ python3 -m venv myvenv ** Linux and macOS Installing on Windows If you are using a virtualenv on Windows, run the fallen command: $ python -m venv myvenv","title":"Step 2"},{"location":"projects/bug_catcher/#step-3","text":"Install the requirements $ pip install -f requirements.txt Installing pip If you don't have the 'pip' package installed, run the fallen command: $ python -m pip install --upgrade pip In this way you'll get the most updated version of the 'pip' package. **This command is compatible with Linux, macOS and Windows","title":"Step 3"},{"location":"projects/bug_catcher/#step-4","text":"Create a superuser $ python manage.py createsuperuser","title":"Step 4"},{"location":"projects/bug_catcher/#test-cases","text":"Test Cases Plan","title":"Test cases"},{"location":"projects/bug_catcher/#scenario-1-login","text":"","title":"Scenario 1 - Login"},{"location":"projects/bug_catcher/#test_login_failed","text":"Description Test Data Expected Result The test aims to check if the user can access the system if the login fails. Use: username - \u201cberoli\u201d; password - \u201c1234\u201d The system will return an error asking the user to enter a correct username.","title":"test_login_failed"},{"location":"projects/bug_catcher/#test_login_success","text":"Description Test Data Expected Result The test aims to check if the user will be redirected to the main page if the login is successful. Use: username - \u201crenataberoli\u201d; password - \u201c123and4\u201d The user will be redirected to the \u201clist of issues\u201d page.","title":"test_login_success"},{"location":"projects/bug_catcher/#scenario-2-list-filters","text":"","title":"Scenario 2 - List filters"},{"location":"projects/bug_catcher/#test_search_filter","text":"Description Test Data Expected Result This test aims to check if the search field works as expected. Use: Use: \u201cerror\u201d as the search argument. The system will return only issues with \u201cerror\u201d in some parts of the title.","title":"test_search_filter"},{"location":"projects/bug_catcher/#test_priority_filter","text":"Description Test Data Expected Result The test aims to check if the priority field works as expected. Use: Use: \u201curgent\u201d as the field\u2019s option. The system will only return issues with \u201cUrgent\u201d priority.","title":"test_priority_filter"},{"location":"projects/bug_catcher/#test_status_filter","text":"Description Test Data Expected Result The test aims to check if the status field works as expected. Use: Use: \u201cclosed\u201d as the field\u2019s option. The system will only return issues with the status \u201cclosed\u201d.","title":"test_status_filter"},{"location":"projects/bug_catcher/#test_all_filters_together","text":"Description Test Data Expected Result The test aims to check if all the list filters work together as expected. Use: search argument - \u201cerror\u201d; priority - \u201curgent\u201d; status - \u201copen\u201d; label - \u201cfrontend\u201d; assigned - \u201crenataberoli\u201d. The system will only show the issue that matches all the filter's arguments.","title":"test_all_filters_together"},{"location":"projects/bug_catcher/#scenario-3-create-issue","text":"","title":"Scenario 3 - Create issue"},{"location":"projects/bug_catcher/#test_issue_creation","text":"Description Test Data Expected Result The test aims to check if the issue's creation is working as expected. Use: title - \u201cTest issue if issue is created\u201d; project - \u201cAcme\u201d; status - \u201copen\u201d; assignee - \u201crenataberoli\u201d. The system will create a new issue and redirect the user to the detail view.","title":"test_issue_creation"},{"location":"projects/bug_catcher/#roadmap","text":"Create the basic structure of the system (CRUD - create, retrieve, update and delete). Add a pagination for this list of issues. Create a series of list filters to help the user find what he wants. Create a login and authentication flow. Improve the UI to meet the mockups design before. Improve the software's documentation. Write some basic tests to make sure that the system is working as expected.","title":"Roadmap"},{"location":"projects/dockgrid/","text":"Dockgrid Dockgrid is an easy-to-use data analysis orchestration tool for distributed computing. Context The product's primary goal is to create a simple and effective environment for small companies, universities, and bioinformaticians to run their pipelines from their machines without a lot of configuration or cloud. Objective In this project, my challenge was to propose improvements to the beta version of the service. The Process I used the fundamentals of Design Thinking to build a novel process and idea. Empathise Research I initially began the research with desk research in order to understand the User. While doing this desk research, I made a CSD (Certainties, Suppositions, and Doubts) Matrix. It's a technique that you can use to define the scope of any new challenge. I usually use it before interviews to clearly understand the minimum I need to know about the User. The matrix has three columns: 1) what is already known, 2) hypotheses raised, and 3) what is still unknown and needs to be investigated. Then, being the CSD matrix ready, I start to listen to the users. Define In this step, I take the information I got in the research and define some crucial aspects to move on. Some of these aspects are the Target audience, User's pains, User's goals, and Competitors. Competitors Analysis I identified the companies that have the closest services to analyze their features, how they talk with a target audience and what I could improve upon. List of Competitors - https://tower.nf/ - https://www.prefect.io/ - https://airflow.apache.org/ - https://github.com/features/actions Ideate Sketch The sketch is a quick way to put ideas on the paper and test with the stakeholders. Prototype Solution The solution's main goal was to reach simplicity without losing the many features that make the system a robust tool. Design System The beta version was built only using the Bootstrap default components and colors. In this new version, the stakeholders wish to give a personality for the brand, so I worked on an initial design system for the project. Design decisions In the initial research, I noticed that the interfaces of this kind of application were crowded. Too many features and data can cause distraction and confusion. I worked on a clean design with components that could be recycled within in different parts of the flow. I chose to change the orientation of the cards to make better use of the screen space and decrease the vertical scrolling that existed on small screens. This pattern is also beneficial in mobile interfaces because we could use labels on the side. Test The \"final test\" is usability Testing performed by me with a sample of the system's users in the Figma prototype. The idea was approved with some minor changes. What did I Learn? I improved my experience using Figma to design the UI templates; To use more \"paper-prototype\" to validate initial ideas.","title":"Dockgrid"},{"location":"projects/dockgrid/#dockgrid","text":"Dockgrid is an easy-to-use data analysis orchestration tool for distributed computing.","title":"Dockgrid"},{"location":"projects/dockgrid/#context","text":"The product's primary goal is to create a simple and effective environment for small companies, universities, and bioinformaticians to run their pipelines from their machines without a lot of configuration or cloud.","title":"Context"},{"location":"projects/dockgrid/#objective","text":"In this project, my challenge was to propose improvements to the beta version of the service.","title":"Objective"},{"location":"projects/dockgrid/#the-process","text":"I used the fundamentals of Design Thinking to build a novel process and idea.","title":"The Process"},{"location":"projects/dockgrid/#empathise","text":"","title":"Empathise"},{"location":"projects/dockgrid/#research","text":"I initially began the research with desk research in order to understand the User. While doing this desk research, I made a CSD (Certainties, Suppositions, and Doubts) Matrix. It's a technique that you can use to define the scope of any new challenge. I usually use it before interviews to clearly understand the minimum I need to know about the User. The matrix has three columns: 1) what is already known, 2) hypotheses raised, and 3) what is still unknown and needs to be investigated. Then, being the CSD matrix ready, I start to listen to the users.","title":"Research"},{"location":"projects/dockgrid/#define","text":"In this step, I take the information I got in the research and define some crucial aspects to move on. Some of these aspects are the Target audience, User's pains, User's goals, and Competitors.","title":"Define"},{"location":"projects/dockgrid/#competitors-analysis","text":"I identified the companies that have the closest services to analyze their features, how they talk with a target audience and what I could improve upon. List of Competitors - https://tower.nf/ - https://www.prefect.io/ - https://airflow.apache.org/ - https://github.com/features/actions","title":"Competitors Analysis"},{"location":"projects/dockgrid/#ideate","text":"","title":"Ideate"},{"location":"projects/dockgrid/#sketch","text":"The sketch is a quick way to put ideas on the paper and test with the stakeholders.","title":"Sketch"},{"location":"projects/dockgrid/#prototype","text":"","title":"Prototype"},{"location":"projects/dockgrid/#solution","text":"The solution's main goal was to reach simplicity without losing the many features that make the system a robust tool.","title":"Solution"},{"location":"projects/dockgrid/#design-system","text":"The beta version was built only using the Bootstrap default components and colors. In this new version, the stakeholders wish to give a personality for the brand, so I worked on an initial design system for the project.","title":"Design System"},{"location":"projects/dockgrid/#design-decisions","text":"In the initial research, I noticed that the interfaces of this kind of application were crowded. Too many features and data can cause distraction and confusion. I worked on a clean design with components that could be recycled within in different parts of the flow. I chose to change the orientation of the cards to make better use of the screen space and decrease the vertical scrolling that existed on small screens. This pattern is also beneficial in mobile interfaces because we could use labels on the side.","title":"Design decisions"},{"location":"projects/dockgrid/#test","text":"The \"final test\" is usability Testing performed by me with a sample of the system's users in the Figma prototype. The idea was approved with some minor changes.","title":"Test"},{"location":"projects/dockgrid/#what-did-i-learn","text":"I improved my experience using Figma to design the UI templates; To use more \"paper-prototype\" to validate initial ideas.","title":"What did I Learn?"},{"location":"projects/neobiome/","text":"Context The Neobiome platform represents a complete solution for quality monitoring and a strategic decision-making tool based on microbiome information. With our platform, we provide support in the areas of contamination and outbreak tracking and control, risk management, process improvement, food safety, and good practices for microbiological control. The Solution I worked in the dashboard of this system and the redesign of some components and graphs to improve the user's experience {: .box-note} To see more about the Neobiome BIM: Neobiome BIM - Microorganisms Information Bank","title":"Neobiome BIM"},{"location":"projects/neobiome/#context","text":"The Neobiome platform represents a complete solution for quality monitoring and a strategic decision-making tool based on microbiome information. With our platform, we provide support in the areas of contamination and outbreak tracking and control, risk management, process improvement, food safety, and good practices for microbiological control.","title":"Context"},{"location":"projects/neobiome/#the-solution","text":"I worked in the dashboard of this system and the redesign of some components and graphs to improve the user's experience {: .box-note} To see more about the Neobiome BIM: Neobiome BIM - Microorganisms Information Bank","title":"The Solution"},{"location":"projects/reports/","text":"Context The company started developing a new product based on 16S amplicon sequencing to aid in the diagnostic of digestive issues. The data A typical result (generated by the bioinformatics team) would give a count table with organisms and their relative abundance in the patient microbiome. The report Given the commercial model chosen for the product, results were presented in a report, formatted as a PDF file instead of a web application. The conclusions were drawn from the data based on: scientific literature patient symptom's the company historical data of patients and healthy individuals specialized algorithms The challenge The project posed exciting challenges, to quote a few: Data density Conclusion characteristics Uneven audience background (medical doctors, nutritionists, and patients). The solution The report can't present a diagnostic; the most crucial piece of information is binary: \"Balanced/Unbalanced gut flora.\" Without a definitive diagnosis, we provide both quantitative and qualitative data on the Bacteria detected by the product to help doctors and nutritionists decide their course of action. For some features, we show the patient how he compares with the general population. We present literature connecting some features to patient symptoms. One-page review A full report is composed of multiple pages, here I present the \"Overview\" page with some elements discussed in this portfolio article: Conclusion The first version of the report was just a massive amount of text, proving difficult for doctors and patients to assimilate. During the course of the project, we managed to translate the textual biological data into visual components, with made the data easier to understand.","title":"Microbiome Reports"},{"location":"projects/reports/#context","text":"The company started developing a new product based on 16S amplicon sequencing to aid in the diagnostic of digestive issues.","title":"Context"},{"location":"projects/reports/#the-data","text":"A typical result (generated by the bioinformatics team) would give a count table with organisms and their relative abundance in the patient microbiome.","title":"The data"},{"location":"projects/reports/#the-report","text":"Given the commercial model chosen for the product, results were presented in a report, formatted as a PDF file instead of a web application. The conclusions were drawn from the data based on: scientific literature patient symptom's the company historical data of patients and healthy individuals specialized algorithms","title":"The report"},{"location":"projects/reports/#the-challenge","text":"The project posed exciting challenges, to quote a few: Data density Conclusion characteristics Uneven audience background (medical doctors, nutritionists, and patients).","title":"The challenge"},{"location":"projects/reports/#the-solution","text":"The report can't present a diagnostic; the most crucial piece of information is binary: \"Balanced/Unbalanced gut flora.\" Without a definitive diagnosis, we provide both quantitative and qualitative data on the Bacteria detected by the product to help doctors and nutritionists decide their course of action. For some features, we show the patient how he compares with the general population. We present literature connecting some features to patient symptoms.","title":"The solution"},{"location":"projects/reports/#one-page-review","text":"A full report is composed of multiple pages, here I present the \"Overview\" page with some elements discussed in this portfolio article:","title":"One-page review"},{"location":"projects/reports/#conclusion","text":"The first version of the report was just a massive amount of text, proving difficult for doctors and patients to assimilate. During the course of the project, we managed to translate the textual biological data into visual components, with made the data easier to understand.","title":"Conclusion"},{"location":"projects/test_case/","text":"Testing GitHub Search API with python unittest Project Name: Testing GitHub Search API with python unittest Module Name: Searching for repositories Reference Document: Github Docs Test Scenarios: Positive Testing + Optional Parameters Created By: Renata Beroli Date of Creation: 24/11/2021 Test Action Category Test Action Description Validate status code: 200 OK for GET requests Validate state: N/A Performance sanity: N/A Test Cases Those Test Cases bellow were executed and automatized in my GitHub --> Unittest - GitHub API test_repo_search_by_name Description Test Data Expected Result This test aims to confirm that the GitHub Search API returns just the result that matches the repository's name searched. Use: Keyword \"Python\". Qualifier \"in:name\". The GitHub API returns a list of repositories with the specific name that was searched. test_repo_search_by_description Description Test Data Expected Result This test aims to confirm that Github Search API returns the repositories that have the searched keyword within the description. Use: Keyword \"Python\". Qualifier \"in:description\". The GitHub API returns one or more repositories that have the word \u201cPython\u201d in your description. test_repo_search_by_readme Description Test Data Expected Result This test aims to confirm that GitHub Search API returns the repositories that have the the searched keyword in the readme. Use: Keyword \"Cadmio\". Qualifier \"in:readme\". The GitHub API returns one or more repositories with the word \u201cCadmio\u201d in your readme. test_repo_search_by_owner_name Description Test Data Expected Result This test aims to confirm that GitHub Search API returns just the repository of the specific patch. Use: owner/name \"renataberoli/renataberoli.github.io\". Qualifier \"repo:owner/name\". The GitHub API returns only the specific repository searched. test_repo_search_by_user Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only the repositories of a specific user. Use: User \"renataberoli\". Qualifier \"user\". The GitHub API returns only the repositories of \u201crenataberoli\u201d. test_repo_search_by_org Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only the repositories of a specific organization. Use: Organization: \u201cgithub\u201d. Qualifier: \u201corg\u201d. The GitHub API returns only the repositories of the organization \u201cgithub\u201d. test_repo_search_by_size Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only repositories of a certain size. Use: repository\u2019s size: less or equal than 100 kilobytes. Qualifier: \u201csize\u201d. The GitHub API returns only repositories smaller or equal to 100 kilobytes. test_repo_search_by_num_of_followers Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only repositories of a certain number of followers. Use: Keyword \u201crenataberoli\u201d; Number of followers = 1. Qualifier: \u201cin:description\u201d; \u201cfollowers\u201d. The Github API returns only the repository with \u201crenataberoli\u201d in the description and that the number of followers is 1. Lack of clarity in the github response This test was hard to do due to the confusion about the subject of the repository's \"follower\". Problem evidence test_repo_search_by_num_of_forks Description Test Data Expected Result The test aims to confirm that GitHub Search API returns repositories of a certain number of forks. Use: Number of forks greater or equal to 1000; sort by \u201cforks\u201d; order ascendant. Qualifiers: \u201cfork\u201d; \u201csort\u201d; \u201corder\u201d. The GitHub API returns a list of repositories with number of forks greater or equal to 1000 ordered ascendant. Bug found I found an ordination issue repository's response when the number of forks is lower (like in the >=1000 scenario). I also try with a highter (10000) value and the the response returns a ordered list. \"forks: >= 1000\" \"forks: >= 10000\" To see the test code, consider visiting the my Github repository . test_repo_search_by_num_of_stars Description Test Data Expected Result The test aims to confirm that GitHub Search API returns the repositories of a specific number of stars ordered ascendant. Use: Number of stars greater than 5000; sorted by: stars; ordered by: ascendant. Qualifiers: \u201cstars\u201d; \u201csort\u201d; \u201corder\u201d. The GitHub API returned a list of repositories with more than 5000 and ordered ascendant. test_repo_search_by_creation_date Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories from a specifc creation date. Use: Date: 2021-01-01. Qualifier: \u201ccreated\u201d The GItHub API returned a list of repositories with the creation date from \u201c2021-01-01\u201d. test_repo_search_by_push_date Description Test Data Expected Result The test aims to confirm that GItHub API returns the repositories from a specifc pushed date. Use: Date: 2020-01-01. Qualifier: \u201cpushed\u201d The GItHub API returned a list of repositories with the creation date from \u201c2020-01-01\u201d. test_repo_search_by_language Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that have a specific language. Use: Language \u201cpython\u201d. Qualifier: \u201clanguage\u201d. The GitHub API returned a list of repositories with \u201cpython\u201d as a language. test_repo_search_by_topic Description Test Data Expected Result The test aims to confirm that GitHub API returns the respositories os that have a specific topic. Use: Keyword \u201cpython. Qualifier: \u201ctopic\u201d. The GitHub API returned a list of repositories with \u201cpython\u201d as a topic in the topic list. test_repo_search_by_num_of_topics Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories of a certain amount of topics. Use: Number of topics: 1. Qualifier: \u201ctopics\u201d. The GitHub API returned only repositories with one topic applied to repository. test_repo_search_by_license Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that contain the keyword and a specific license applied. Use: Keyword \u201cpython\u201d; licence \u201ceupl-1.1\u201d. Qualifier: \u201clicense\u201d. The GitHub API returned only repositories that contain the keyword \u201cpython\u201d and the license \u201ceupl-1.1\u201d. test_repo_search_by_visibility Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories with the two types of visibility (public and private). Use: Private test = Keyword \u201csignature\u201d in readme; user \u201crenataberoli\u201d. Qualifiers: \u201cin:readme\u201d; \u201cuser\u201d; \u201cis:private\u201d. Public test = Keyword \u201crenataberoli\u201d in description; user \u201crenataberoli\u201d. Qualifiers: \u201cin:description\u201d; \u201cuser\u201d; \u201cis:public\u201d. Private test = The GitHub API returned an empty object due to the private state of the repository and the test without authentication. Public test = The GitHub API returned only the repository searched. test_repo_search_by_if_is_mirror Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that are mirrors. Use: Qualifier: \u201cmirror:true\u201d. The GitHub API returned only repositories that are mirrors. test_repo_search_by_if_is_archived Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that were archived. Use: Qualifier: \u201carchived:true\u201d. The GitHub API returned a list of only archived repositories. test_repo_search_by_issue_label_good_first_issues Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories filter by a specific label of these issues. Use: Keyword \u201crenataberoli\u201d in description; Amount of issues with the label: 1. Qualifiers: \u201cin:description\u201d \u201cgood-first-issues\u201d. The GitHub API returned a specific repository with \u201crenataberoli\u201d in the description and 1 issue with the label \u201cgood first issues\u201d. test_repo_search_by_issue_label_wanted_issues Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories filter by a specific label of these issues. Use: Keyword \u201crenataberoli\u201d in description; Amount of issues with the label: 1. Qualifiers: \u201cin:description\u201d \u201chelp-wanted-issues\u201d. The GitHub API returned a specific repository with \u201crenataberoli\u201d in the description and 1 issue with the label \u201chelp wanted issues\u201d. test_repo_search_by_ability_to_sponsor Description Test Data Expected Result The test aims to confirm that GitHub API returns only repositories that have the ability to sponsor. Use: Qualifier: \u201cis:sponsorable\u201d. The GitHub API returned a list of repositories that has the ability to sponsor. Unable to reproduce The API didn't return an object that helped to confirm this test.test_repo_search_by_founding_file test_repo_search_by_founding_file Description Test Data Expected Result The test aims to confirm that GitHub API returns only repositories that have a founding file (FUNDING.yml ). Use: Qualifier: has:funding-file The GitHub API returned a list of repositories that has a file named \u201cFUNDING.yml \u201c.","title":"Test Cases"},{"location":"projects/test_case/#testing-github-search-api-with-python-unittest","text":"Project Name: Testing GitHub Search API with python unittest Module Name: Searching for repositories Reference Document: Github Docs Test Scenarios: Positive Testing + Optional Parameters Created By: Renata Beroli Date of Creation: 24/11/2021 Test Action Category Test Action Description Validate status code: 200 OK for GET requests Validate state: N/A Performance sanity: N/A","title":"Testing GitHub Search API with python unittest"},{"location":"projects/test_case/#test-cases","text":"Those Test Cases bellow were executed and automatized in my GitHub --> Unittest - GitHub API","title":"Test Cases"},{"location":"projects/test_case/#test_repo_search_by_name","text":"Description Test Data Expected Result This test aims to confirm that the GitHub Search API returns just the result that matches the repository's name searched. Use: Keyword \"Python\". Qualifier \"in:name\". The GitHub API returns a list of repositories with the specific name that was searched.","title":"test_repo_search_by_name"},{"location":"projects/test_case/#test_repo_search_by_description","text":"Description Test Data Expected Result This test aims to confirm that Github Search API returns the repositories that have the searched keyword within the description. Use: Keyword \"Python\". Qualifier \"in:description\". The GitHub API returns one or more repositories that have the word \u201cPython\u201d in your description.","title":"test_repo_search_by_description"},{"location":"projects/test_case/#test_repo_search_by_readme","text":"Description Test Data Expected Result This test aims to confirm that GitHub Search API returns the repositories that have the the searched keyword in the readme. Use: Keyword \"Cadmio\". Qualifier \"in:readme\". The GitHub API returns one or more repositories with the word \u201cCadmio\u201d in your readme.","title":"test_repo_search_by_readme"},{"location":"projects/test_case/#test_repo_search_by_owner_name","text":"Description Test Data Expected Result This test aims to confirm that GitHub Search API returns just the repository of the specific patch. Use: owner/name \"renataberoli/renataberoli.github.io\". Qualifier \"repo:owner/name\". The GitHub API returns only the specific repository searched.","title":"test_repo_search_by_owner_name"},{"location":"projects/test_case/#test_repo_search_by_user","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only the repositories of a specific user. Use: User \"renataberoli\". Qualifier \"user\". The GitHub API returns only the repositories of \u201crenataberoli\u201d.","title":"test_repo_search_by_user"},{"location":"projects/test_case/#test_repo_search_by_org","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only the repositories of a specific organization. Use: Organization: \u201cgithub\u201d. Qualifier: \u201corg\u201d. The GitHub API returns only the repositories of the organization \u201cgithub\u201d.","title":"test_repo_search_by_org"},{"location":"projects/test_case/#test_repo_search_by_size","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only repositories of a certain size. Use: repository\u2019s size: less or equal than 100 kilobytes. Qualifier: \u201csize\u201d. The GitHub API returns only repositories smaller or equal to 100 kilobytes.","title":"test_repo_search_by_size"},{"location":"projects/test_case/#test_repo_search_by_num_of_followers","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns only repositories of a certain number of followers. Use: Keyword \u201crenataberoli\u201d; Number of followers = 1. Qualifier: \u201cin:description\u201d; \u201cfollowers\u201d. The Github API returns only the repository with \u201crenataberoli\u201d in the description and that the number of followers is 1. Lack of clarity in the github response This test was hard to do due to the confusion about the subject of the repository's \"follower\". Problem evidence","title":"test_repo_search_by_num_of_followers"},{"location":"projects/test_case/#test_repo_search_by_num_of_forks","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns repositories of a certain number of forks. Use: Number of forks greater or equal to 1000; sort by \u201cforks\u201d; order ascendant. Qualifiers: \u201cfork\u201d; \u201csort\u201d; \u201corder\u201d. The GitHub API returns a list of repositories with number of forks greater or equal to 1000 ordered ascendant. Bug found I found an ordination issue repository's response when the number of forks is lower (like in the >=1000 scenario). I also try with a highter (10000) value and the the response returns a ordered list. \"forks: >= 1000\" \"forks: >= 10000\" To see the test code, consider visiting the my Github repository .","title":"test_repo_search_by_num_of_forks"},{"location":"projects/test_case/#test_repo_search_by_num_of_stars","text":"Description Test Data Expected Result The test aims to confirm that GitHub Search API returns the repositories of a specific number of stars ordered ascendant. Use: Number of stars greater than 5000; sorted by: stars; ordered by: ascendant. Qualifiers: \u201cstars\u201d; \u201csort\u201d; \u201corder\u201d. The GitHub API returned a list of repositories with more than 5000 and ordered ascendant.","title":"test_repo_search_by_num_of_stars"},{"location":"projects/test_case/#test_repo_search_by_creation_date","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories from a specifc creation date. Use: Date: 2021-01-01. Qualifier: \u201ccreated\u201d The GItHub API returned a list of repositories with the creation date from \u201c2021-01-01\u201d.","title":"test_repo_search_by_creation_date"},{"location":"projects/test_case/#test_repo_search_by_push_date","text":"Description Test Data Expected Result The test aims to confirm that GItHub API returns the repositories from a specifc pushed date. Use: Date: 2020-01-01. Qualifier: \u201cpushed\u201d The GItHub API returned a list of repositories with the creation date from \u201c2020-01-01\u201d.","title":"test_repo_search_by_push_date"},{"location":"projects/test_case/#test_repo_search_by_language","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that have a specific language. Use: Language \u201cpython\u201d. Qualifier: \u201clanguage\u201d. The GitHub API returned a list of repositories with \u201cpython\u201d as a language.","title":"test_repo_search_by_language"},{"location":"projects/test_case/#test_repo_search_by_topic","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the respositories os that have a specific topic. Use: Keyword \u201cpython. Qualifier: \u201ctopic\u201d. The GitHub API returned a list of repositories with \u201cpython\u201d as a topic in the topic list.","title":"test_repo_search_by_topic"},{"location":"projects/test_case/#test_repo_search_by_num_of_topics","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories of a certain amount of topics. Use: Number of topics: 1. Qualifier: \u201ctopics\u201d. The GitHub API returned only repositories with one topic applied to repository.","title":"test_repo_search_by_num_of_topics"},{"location":"projects/test_case/#test_repo_search_by_license","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that contain the keyword and a specific license applied. Use: Keyword \u201cpython\u201d; licence \u201ceupl-1.1\u201d. Qualifier: \u201clicense\u201d. The GitHub API returned only repositories that contain the keyword \u201cpython\u201d and the license \u201ceupl-1.1\u201d.","title":"test_repo_search_by_license"},{"location":"projects/test_case/#test_repo_search_by_visibility","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories with the two types of visibility (public and private). Use: Private test = Keyword \u201csignature\u201d in readme; user \u201crenataberoli\u201d. Qualifiers: \u201cin:readme\u201d; \u201cuser\u201d; \u201cis:private\u201d. Public test = Keyword \u201crenataberoli\u201d in description; user \u201crenataberoli\u201d. Qualifiers: \u201cin:description\u201d; \u201cuser\u201d; \u201cis:public\u201d. Private test = The GitHub API returned an empty object due to the private state of the repository and the test without authentication. Public test = The GitHub API returned only the repository searched.","title":"test_repo_search_by_visibility"},{"location":"projects/test_case/#test_repo_search_by_if_is_mirror","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that are mirrors. Use: Qualifier: \u201cmirror:true\u201d. The GitHub API returned only repositories that are mirrors.","title":"test_repo_search_by_if_is_mirror"},{"location":"projects/test_case/#test_repo_search_by_if_is_archived","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories that were archived. Use: Qualifier: \u201carchived:true\u201d. The GitHub API returned a list of only archived repositories.","title":"test_repo_search_by_if_is_archived"},{"location":"projects/test_case/#test_repo_search_by_issue_label_good_first_issues","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories filter by a specific label of these issues. Use: Keyword \u201crenataberoli\u201d in description; Amount of issues with the label: 1. Qualifiers: \u201cin:description\u201d \u201cgood-first-issues\u201d. The GitHub API returned a specific repository with \u201crenataberoli\u201d in the description and 1 issue with the label \u201cgood first issues\u201d.","title":"test_repo_search_by_issue_label_good_first_issues"},{"location":"projects/test_case/#test_repo_search_by_issue_label_wanted_issues","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns the repositories filter by a specific label of these issues. Use: Keyword \u201crenataberoli\u201d in description; Amount of issues with the label: 1. Qualifiers: \u201cin:description\u201d \u201chelp-wanted-issues\u201d. The GitHub API returned a specific repository with \u201crenataberoli\u201d in the description and 1 issue with the label \u201chelp wanted issues\u201d.","title":"test_repo_search_by_issue_label_wanted_issues"},{"location":"projects/test_case/#test_repo_search_by_ability_to_sponsor","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns only repositories that have the ability to sponsor. Use: Qualifier: \u201cis:sponsorable\u201d. The GitHub API returned a list of repositories that has the ability to sponsor. Unable to reproduce The API didn't return an object that helped to confirm this test.test_repo_search_by_founding_file","title":"test_repo_search_by_ability_to_sponsor"},{"location":"projects/test_case/#test_repo_search_by_founding_file","text":"Description Test Data Expected Result The test aims to confirm that GitHub API returns only repositories that have a founding file (FUNDING.yml ). Use: Qualifier: has:funding-file The GitHub API returned a list of repositories that has a file named \u201cFUNDING.yml \u201c.","title":"test_repo_search_by_founding_file"}]}